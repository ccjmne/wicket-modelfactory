*Wicket-modelfactory is an API to create Wicket PropertyModels in a typesafe and refactoring-safe way.*

Code says more than thousand words:

{noformat}
IModel<Integer> ageModel = model(from(myPersonObject).getAge());
{noformat} 

or 

{noformat}
IModel<String> streetModel = model(from(myPersonObject).getAdressData().getHomeAdress().getStreet());      
{noformat}

where _myPersonObject_ can be a typed IModel or a Bean. 

h2. Kudos

The idea is pretty old. There are several implementations around:

[SafeModel|http://github.com/duesenklipper/wicket-safemodel]

[Wicket Wiki using LambdaJ|http://cwiki.apache.org/WICKET/working-with-wicket-models.html#WorkingwithWicketmodels-LambdaJ]

and probably some more

h2. Comparison

The reason for this little project is that we liked the SafeModel-API (using a ThreadModel) better than the lambdaJ approach.

h3. tl;dr;  

*SafeModel = nice but slow*
*LambdaJ = fast but a little clumsier and sometimes JIT breaks it.* 

h3. Longer version of the story:

On the other hand SafeModel happens to be too slow for us (We had a page with >600 models that went up from 150ms to 2700ms just by using SafeModel rather than lambdaJ.

LambdaJ on the other hand has a feature of JITting that, being enabled, caused spuriously intermixed models/failures.  

h2. Implementation

We faciliated LambdaJ (without the JITing, Objenesis, GentyRef & CGLib).
 
While this list of dependencies may sound frightening, the only dependency you need that does not necessarily come with Wicket is *cglib:cglib-nodep:2.2.2*.
The rest of the dependencies are shaded into an internal package of Wicket-modelfactory, in order not to interfere with your dependecy management.

Unfortunately, this is not easy to do with CGLib, as it contains Strings referencing its classes. 

h2. Usage

_model()_ and _from()_ are static methods on ModelFactory. You should probably prepare you IDE to import these.

h2. Tip

If you use the excellent [lombok|http://project-lombok.org] projects, you end up with very little boilerplate and type-safe models:

{noformat}
@Data
public class Bean{
 private int myInt;
 private String myString;
}
...
IModel<Integer> ageModel = model(from(beanInstance).getMyInt());
{noformat}